syntax = "proto3";

package dispatch.sdk.v1;

import "dispatch/sdk/v1/exit.proto";
import "dispatch/sdk/v1/poll.proto";
import "dispatch/sdk/v1/status.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// The FunctionService service is used to interface with programmable endpoints
// exposing remote functions.
service FunctionService {
  // Run runs the function identified by the request, and returns a response
  // that either contains a result when the function completed, or a poll
  // directive and the associated coroutine state if the function was suspended.
  rpc Run(RunRequest) returns (RunResponse) {}
}

// RunRequest is received by calls to the Run method of FunctionService.
message RunRequest {
  // Identifier of the function to run.
  //
  // This value corresponds to the function name that was originally submitted
  // by the dispatch request.
  string function = 1;

  // The function run is associated a directive that defines whether the run
  // is a new invocation of the function, or a continuation of a suspended
  // coroutine.
  oneof directive {
    // On the first run of a function, the input field contains the parameters
    // to pass to the function.
    //
    // This is the same value that was originally passed in the dispatch request
    // that triggered the function to run.
    google.protobuf.Any input = 2;

    // PollResult represents the result of a poll operation. When a previous
    // function run was suspended by returning a poll directive to the caller,
    // the following run of the function resumes execution and provides the
    // set of results for operations that have completed.
    PollResult poll_result = 3;
  }

  // Opaque identifier for the function call.
  //
  // It's the same value as the Dispatch ID that was returned when the call
  // was dispatched (on DispatchResponse).
  string dispatch_id = 4;

  // Opaque identifier for the parent function call.
  //
  // Functions can call other functions via Poll.calls. If this function call
  // has a parent function call, the identifier of the parent can be found
  // here. If the function call does not have a parent, the field will
  // be empty.
  string parent_dispatch_id = 5;

  // Opaque identifier for the root function call.
  //
  // When functions call other functions, an additional level on the call
  // hierarchy tree is created. This field carries the identifier of the
  // root function call in the tree.
  string root_dispatch_id = 6;

  // Time at which the function call was created.
  //
  // Note that if the function tail-calls, the timestamp is not reset.
  google.protobuf.Timestamp creation_time = 7;

  // Time at which the function call expires.
  google.protobuf.Timestamp expiration_time = 8;
}

// RunResponse is returned by calls to the Run method of FunctionService.
message RunResponse {
  // Status defines the status of the function run. This field is used by the
  // caller to categorize the condition under which the function run returned.
  Status status = 1;

  // The function run instructs the caller of what it expects to happen next by
  // embedding a directive in the response.
  oneof directive {
    // When the function run completes, an exit directive is returned to the
    // caller. The exit directive contains the result of the function run, along
    // with an optional tail call to trigger the run of another function.
    Exit exit = 2;

    // When the function run is suspended, a poll directive is returned to the
    // caller. The poll directive contains the state of the coroutine, and a set
    // of calls to make asynchronously. The caller is expected to wait for the
    // results of the calls, and then resume the function run by providing the
    // results in a subsequent RunRequest.
    Poll poll = 3;
  }
}
